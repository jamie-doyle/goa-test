// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// Table Info Service gRPC client CLI support package
//
// Command:
// $ goa gen github.com/jamie-doyle/goa-test/design

package cli

import (
	"flag"
	"fmt"
	"os"

	tableinfoc "github.com/jamie-doyle/goa-test/gen/grpc/table_info/client"
	goa "goa.design/goa"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `table-info get-info
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` table-info get-info --message '{
      "tableName": "myGreatTable"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		tableInfoFlags = flag.NewFlagSet("table-info", flag.ContinueOnError)

		tableInfoGetInfoFlags       = flag.NewFlagSet("get-info", flag.ExitOnError)
		tableInfoGetInfoMessageFlag = tableInfoGetInfoFlags.String("message", "", "")
	)
	tableInfoFlags.Usage = tableInfoUsage
	tableInfoGetInfoFlags.Usage = tableInfoGetInfoUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "table-info":
			svcf = tableInfoFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "table-info":
			switch epn {
			case "get-info":
				epf = tableInfoGetInfoFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "table-info":
			c := tableinfoc.NewClient(cc, opts...)
			switch epn {
			case "get-info":
				endpoint = c.GetInfo()
				data, err = tableinfoc.BuildGetInfoPayload(*tableInfoGetInfoMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// table-infoUsage displays the usage of the table-info command and its
// subcommands.
func tableInfoUsage() {
	fmt.Fprintf(os.Stderr, `Service is the TableInfo service interface.
Usage:
    %s [globalflags] table-info COMMAND [flags]

COMMAND:
    get-info: GetInfo implements get_info.

Additional help:
    %s table-info COMMAND --help
`, os.Args[0], os.Args[0])
}
func tableInfoGetInfoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] table-info get-info -message JSON

GetInfo implements get_info.
    -message JSON: 

Example:
    `+os.Args[0]+` table-info get-info --message '{
      "tableName": "myGreatTable"
   }'
`, os.Args[0])
}

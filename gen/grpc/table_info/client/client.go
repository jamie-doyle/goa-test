// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// TableInfo gRPC client
//
// Command:
// $ goa gen github.com/jamie-doyle/goa-test/design

package client

import (
	"context"

	table_infopb "github.com/jamie-doyle/goa-test/gen/grpc/table_info/pb"
	goa "goa.design/goa"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli table_infopb.TableInfoClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the TableInfo service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: table_infopb.NewTableInfoClient(cc),
		opts:    opts,
	}
}

// GetInfo calls the "GetInfo" function in table_infopb.TableInfoClient
// interface.
func (c *Client) GetInfo() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetInfoFunc(c.grpccli, c.opts...),
			EncodeGetInfoRequest,
			DecodeGetInfoResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

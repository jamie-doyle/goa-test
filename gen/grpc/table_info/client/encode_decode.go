// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// TableInfo gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/jamie-doyle/goa-test/design

package client

import (
	"context"

	table_infopb "github.com/jamie-doyle/goa-test/gen/grpc/table_info/pb"
	tableinfo "github.com/jamie-doyle/goa-test/gen/table_info"
	tableinfoviews "github.com/jamie-doyle/goa-test/gen/table_info/views"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetInfoFunc builds the remote method to invoke for "TableInfo" service
// "get_info" endpoint.
func BuildGetInfoFunc(grpccli table_infopb.TableInfoClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetInfo(ctx, reqpb.(*table_infopb.GetInfoRequest), opts...)
		}
		return grpccli.GetInfo(ctx, &table_infopb.GetInfoRequest{}, opts...)
	}
}

// EncodeGetInfoRequest encodes requests sent to TableInfo get_info endpoint.
func EncodeGetInfoRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*tableinfo.GetInfoPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TableInfo", "get_info", "*tableinfo.GetInfoPayload", v)
	}
	return NewGetInfoRequest(payload), nil
}

// DecodeGetInfoResponse decodes responses from the TableInfo get_info endpoint.
func DecodeGetInfoResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*table_infopb.GetInfoResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TableInfo", "get_info", "*table_infopb.GetInfoResponse", v)
	}
	res := NewGetInfoResult(message)
	vres := &tableinfoviews.Tablepayload{Projected: res, View: view}
	if err := tableinfoviews.ValidateTablepayload(vres); err != nil {
		return nil, err
	}
	return tableinfo.NewTablepayload(vres), nil
}

// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// TableInfo gRPC server
//
// Command:
// $ goa gen github.com/jamie-doyle/goa-test/design

package server

import (
	"context"

	table_infopb "github.com/jamie-doyle/goa-test/gen/grpc/table_info/pb"
	tableinfo "github.com/jamie-doyle/goa-test/gen/table_info"
	"goa.design/goa"
	goagrpc "goa.design/goa/grpc"
)

// Server implements the table_infopb.TableInfoServer interface.
type Server struct {
	GetInfoH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the TableInfo service endpoints.
func New(e *tableinfo.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GetInfoH: NewGetInfoHandler(e.GetInfo, uh),
	}
}

// NewGetInfoHandler creates a gRPC handler which serves the "TableInfo"
// service "get_info" endpoint.
func NewGetInfoHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetInfoRequest, EncodeGetInfoResponse)
	}
	return h
}

// GetInfo implements the "GetInfo" method in table_infopb.TableInfoServer
// interface.
func (s *Server) GetInfo(ctx context.Context, message *table_infopb.GetInfoRequest) (*table_infopb.GetInfoResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "get_info")
	ctx = context.WithValue(ctx, goa.ServiceKey, "TableInfo")
	resp, err := s.GetInfoH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*table_infopb.GetInfoResponse), nil
}

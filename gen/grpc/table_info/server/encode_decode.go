// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// TableInfo gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/jamie-doyle/goa-test/design

package server

import (
	"context"

	table_infopb "github.com/jamie-doyle/goa-test/gen/grpc/table_info/pb"
	tableinfo "github.com/jamie-doyle/goa-test/gen/table_info"
	tableinfoviews "github.com/jamie-doyle/goa-test/gen/table_info/views"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetInfoResponse encodes responses from the "TableInfo" service
// "get_info" endpoint.
func EncodeGetInfoResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*tableinfoviews.Tablepayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TableInfo", "get_info", "*tableinfoviews.Tablepayload", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewGetInfoResponse(result)
	return resp, nil
}

// DecodeGetInfoRequest decodes requests sent to "TableInfo" service "get_info"
// endpoint.
func DecodeGetInfoRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *table_infopb.GetInfoRequest
		ok      bool
	)
	{
		if message, ok = v.(*table_infopb.GetInfoRequest); !ok {
			return nil, goagrpc.ErrInvalidType("TableInfo", "get_info", "*table_infopb.GetInfoRequest", v)
		}
	}
	var payload *tableinfo.GetInfoPayload
	{
		payload = NewGetInfoPayload(message)
	}
	return payload, nil
}

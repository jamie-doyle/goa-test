// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// TableInfo views
//
// Command:
// $ goa gen github.com/jamie-doyle/goa-test/design

package views

import (
	goa "goa.design/goa"
)

// Tablepayload is the viewed result type that is projected based on a view.
type Tablepayload struct {
	// Type to project
	Projected *TablepayloadView
	// View to render
	View string
}

// TablepayloadView is a type that runs validations on a projected type.
type TablepayloadView struct {
	// Describes the table being returned
	Description *string
	// A table ID
	TableID *string
}

var (
	// TablepayloadMap is a map of attribute names in result type Tablepayload
	// indexed by view name.
	TablepayloadMap = map[string][]string{
		"default": []string{
			"description",
		},
	}
)

// ValidateTablepayload runs the validations defined on the viewed result type
// Tablepayload.
func ValidateTablepayload(result *Tablepayload) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTablepayloadView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTablepayloadView runs the validations defined on TablepayloadView
// using the "default" view.
func ValidateTablepayloadView(result *TablepayloadView) (err error) {

	return
}
